name: Release Binaries and Publish NPM Packages

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  macos-arm64:
    name: macOS arm64 (darwin-arm64)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Build binary with PyInstaller
        run: |
          uv venv .venv -p $PYTHON_VERSION
          uv pip install -p .venv/bin/python -U pip setuptools wheel pyinstaller
          uv pip install -p .venv/bin/python -U .
          .venv/bin/python -m PyInstaller -D --clean -n adorable src/adorable_cli/main.py
      - name: Prepare subpackage and publish
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          SUB_DIR="npm/adorable-cli-darwin-arm64"
          PKG_NAME=$(node -p "require('./$SUB_DIR/package.json').name")
          # In onedir mode, the output is a directory. Clear the old vendor dir and copy the new one.
          rm -rf "$SUB_DIR/vendor"
          mkdir -p "$SUB_DIR/vendor"
          cp -r dist/adorable "$SUB_DIR/vendor/"
          CUR=$(node -p "require('./$SUB_DIR/package.json').version")
          echo "Main version: $PKG_VERSION; Subpackage: $PKG_NAME@$CUR"
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          if [ "$CUR" != "$PKG_VERSION" ]; then
            (cd "$SUB_DIR" && npm version "$PKG_VERSION" --no-git-tag-version)
          else
            echo "Version unchanged ($CUR), skipping npm version"
          fi
          PUBLISHED=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$PKG_VERSION" ]; then
            echo "Already published $PKG_NAME@$PUBLISHED, skipping publish."
          else
            (cd "$SUB_DIR" && npm publish --access public)
          fi

  macos-x64:
    name: macOS x64 (darwin-x64)
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Build binary with PyInstaller
        run: |
          uv venv .venv -p $PYTHON_VERSION
          uv pip install -p .venv/bin/python -U pip setuptools wheel pyinstaller
          uv pip install -p .venv/bin/python -U .
          .venv/bin/python -m PyInstaller -D --clean -n adorable src/adorable_cli/main.py
      - name: Prepare subpackage and publish
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          SUB_DIR="npm/adorable-cli-darwin-x64"
          PKG_NAME=$(node -p "require('./$SUB_DIR/package.json').name")
          rm -rf "$SUB_DIR/vendor"
          mkdir -p "$SUB_DIR/vendor"
          cp -r dist/adorable "$SUB_DIR/vendor/"
          CUR=$(node -p "require('./$SUB_DIR/package.json').version")
          echo "Main version: $PKG_VERSION; Subpackage: $PKG_NAME@$CUR"
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          if [ "$CUR" != "$PKG_VERSION" ]; then
            (cd "$SUB_DIR" && npm version "$PKG_VERSION" --no-git-tag-version)
          else
            echo "Version unchanged ($CUR), skipping npm version"
          fi
          PUBLISHED=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$PKG_VERSION" ]; then
            echo "Already published $PKG_NAME@$PUBLISHED, skipping publish."
          else
            (cd "$SUB_DIR" && npm publish --access public)
          fi

  linux-x64:
    name: Linux x64 (linux-x64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Build binary with PyInstaller
        run: |
          uv venv .venv -p $PYTHON_VERSION
          uv pip install -p .venv/bin/python -U pip setuptools wheel pyinstaller
          uv pip install -p .venv/bin/python -U .
          .venv/bin/python -m PyInstaller -D --clean -n adorable src/adorable_cli/main.py
      - name: Prepare subpackage and publish
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          SUB_DIR="npm/adorable-cli-linux-x64"
          PKG_NAME=$(node -p "require('./$SUB_DIR/package.json').name")
          rm -rf "$SUB_DIR/vendor"
          mkdir -p "$SUB_DIR/vendor"
          cp -r dist/adorable "$SUB_DIR/vendor/"
          CUR=$(node -p "require('./$SUB_DIR/package.json').version")
          echo "Main version: $PKG_VERSION; Subpackage: $PKG_NAME@$CUR"
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          if [ "$CUR" != "$PKG_VERSION" ]; then
            (cd "$SUB_DIR" && npm version "$PKG_VERSION" --no-git-tag-version)
          else
            echo "Version unchanged ($CUR), skipping npm version"
          fi
          PUBLISHED=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$PKG_VERSION" ]; then
            echo "Already published $PKG_NAME@$PUBLISHED, skipping publish."
          else
            (cd "$SUB_DIR" && npm publish --access public)
          fi

  linux-arm64:
    name: Linux arm64 (linux-arm64)
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enable QEMU for cross-arch containers
        uses: docker/setup-qemu-action@v3
      - name: Build inside manylinux aarch64 container
        run: |
          docker run --rm --platform linux/arm64 -e PYTHON_VERSION=$PYTHON_VERSION -v "$PWD":/workspace -w /workspace quay.io/pypa/manylinux_2_28_aarch64 bash -lc '
            set -euo pipefail
            curl -LsSf https://astral.sh/uv/install.sh | sh
            # Install Rust toolchain for building rust-based Python extensions (e.g., tiktoken)
            curl -sSf https://sh.rustup.rs | sh -s -- -y
            export PATH="$HOME/.cargo/bin:$PATH"
            [ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"
            rustc --version || true
            cargo --version || true
            # Install libclang/llvm toolchain to satisfy rust bindgen builds (e.g., primp)
            PKGMGR=$(command -v dnf || command -v yum || command -v microdnf || echo "")
            if [ -n "$PKGMGR" ]; then
              if [ "$(basename "$PKGMGR")" = "microdnf" ]; then
                $PKGMGR install -y clang llvm llvm-libs cmake make gcc gcc-c++ git || true
              else
                $PKGMGR -y install clang llvm llvm-libs cmake make gcc gcc-c++ git || true
              fi
            fi
            if command -v llvm-config >/dev/null 2>&1; then
              export LIBCLANG_PATH="$(llvm-config --libdir)"
            else
              export LIBCLANG_PATH="/usr/lib64"
            fi
            export LD_LIBRARY_PATH="$LIBCLANG_PATH:$LD_LIBRARY_PATH"
            # Use the preinstalled manylinux Python for exact ABI matching (e.g., cp311)
            PYBIN=$(ls /opt/python/cp311*/bin/python | head -n 1)
            echo "Using Python interpreter: $PYBIN"
            uv venv .venv -p "$PYBIN"
            uv pip install -p .venv/bin/python -U pip setuptools wheel pyinstaller
            # Use locked dependency versions correctly: export the lockfile and sync
            if [ -f uv.lock ]; then
              # Force binary wheels for heavy packages and pre-install them to avoid source builds
              export PIP_ONLY_BINARY="numpy,scipy,pillow,playwright,tiktoken,shapely,lxml,cryptography,tokenizers"
              uv pip install -p .venv/bin/python --only-binary :all: numpy scipy pillow playwright tiktoken shapely lxml cryptography tokenizers
              # Force binary wheels for heavy packages to avoid slow source builds on aarch64
              uv export --format requirements-txt -o requirements.lock.txt
              uv pip sync -p .venv/bin/python requirements.lock.txt
              # Install our local package without re-resolving deps
              uv pip install -p .venv/bin/python -U --no-deps .
            else
              uv pip install -p .venv/bin/python -U .
            fi
            .venv/bin/python -m PyInstaller -D --clean -n adorable src/adorable_cli/main.py
          '
      - name: Prepare subpackage and publish
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          SUB_DIR="npm/adorable-cli-linux-arm64"
          PKG_NAME=$(node -p "require('./$SUB_DIR/package.json').name")
          # In onedir mode, the output is a directory. Clear the old vendor dir and copy the new one.
          rm -rf "$SUB_DIR/vendor"
          mkdir -p "$SUB_DIR/vendor"
          cp -r dist/adorable "$SUB_DIR/vendor/"
          CUR=$(node -p "require('./$SUB_DIR/package.json').version")
          echo "Main version: $PKG_VERSION; Subpackage: $PKG_NAME@$CUR"
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          if [ "$CUR" != "$PKG_VERSION" ]; then
            (cd "$SUB_DIR" && npm version "$PKG_VERSION" --no-git-tag-version)
          else
            echo "Version unchanged ($CUR), skipping npm version"
          fi
          PUBLISHED=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$PKG_VERSION" ]; then
            echo "Already published $PKG_NAME@$PUBLISHED, skipping publish."
          else
            (cd "$SUB_DIR" && npm publish --access public)
          fi

  windows-x64:
    name: Windows x64 (win32-x64)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install uv
        shell: powershell
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
      - name: Build binary with PyInstaller
        shell: bash
        run: |
          uv venv .venv -p $PYTHON_VERSION
          uv pip install -p .venv/Scripts/python.exe -U pip setuptools wheel pyinstaller
          uv pip install -p .venv/Scripts/python.exe -U .
          .venv/Scripts/python.exe -m PyInstaller -D --clean -n adorable src/adorable_cli/main.py
      - name: Prepare subpackage and publish
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          SUB_DIR="npm/adorable-cli-win32-x64"
          PKG_NAME=$(node -p "require('./$SUB_DIR/package.json').name")
          rm -rf "$SUB_DIR/vendor"
          mkdir -p "$SUB_DIR/vendor"
          cp -r dist/adorable "$SUB_DIR/vendor/"
          # Windows executable is inside the folder
          mv "$SUB_DIR/vendor/adorable/adorable.exe" "$SUB_DIR/vendor/adorable.exe"
          CUR=$(node -p "require('./$SUB_DIR/package.json').version")
          echo "Main version: $PKG_VERSION; Subpackage: $PKG_NAME@$CUR"
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          if [ "$CUR" != "$PKG_VERSION" ]; then
            (cd "$SUB_DIR" && npm version "$PKG_VERSION" --no-git-tag-version)
          else
            echo "Version unchanged ($CUR), skipping npm version"
          fi
          PUBLISHED=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$PKG_VERSION" ]; then
            echo "Already published $PKG_NAME@$PUBLISHED, skipping publish."
          else
            (cd "$SUB_DIR" && npm publish --access public)
          fi

  publish-main:
    name: Publish main package
    needs: [macos-arm64, macos-x64, linux-x64, windows-x64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Sync optionalDependencies to current version
        run: |
          node -e "const fs=require('fs');const p=require('./package.json');const v=p.version;['@loenethan/adorable-cli-darwin-arm64','@loenethan/adorable-cli-darwin-x64','@loenethan/adorable-cli-linux-x64','@loenethan/adorable-cli-win32-x64'].forEach(k=>p.optionalDependencies[k]='^'+v);fs.writeFileSync('package.json', JSON.stringify(p, null, 2));"
      - name: Publish main package
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          npm config set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
          npm whoami || { echo "NPM auth failed. Ensure NPM_TOKEN is set."; exit 1; }
          CURRENT=$(npm view adorable-cli version 2>/dev/null || echo "")
          if [ "$CURRENT" = "$PKG_VERSION" ]; then
            echo "Already published adorable-cli@$CURRENT, skipping publish."
          else
            npm publish --access public
          fi